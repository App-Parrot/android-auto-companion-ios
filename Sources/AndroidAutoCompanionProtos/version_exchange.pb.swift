// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: third_party/companion_protos/version_exchange.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Com_Google_Companionprotos_VersionExchange {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var minSupportedMessagingVersion: Int32 = 0

  public var maxSupportedMessagingVersion: Int32 = 0

  public var minSupportedSecurityVersion: Int32 = 0

  public var maxSupportedSecurityVersion: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.google.companionprotos"

extension Com_Google_Companionprotos_VersionExchange: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VersionExchange"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "min_supported_messaging_version"),
    2: .standard(proto: "max_supported_messaging_version"),
    3: .standard(proto: "min_supported_security_version"),
    4: .standard(proto: "max_supported_security_version"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.minSupportedMessagingVersion) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.maxSupportedMessagingVersion) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.minSupportedSecurityVersion) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.maxSupportedSecurityVersion) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.minSupportedMessagingVersion != 0 {
      try visitor.visitSingularInt32Field(value: self.minSupportedMessagingVersion, fieldNumber: 1)
    }
    if self.maxSupportedMessagingVersion != 0 {
      try visitor.visitSingularInt32Field(value: self.maxSupportedMessagingVersion, fieldNumber: 2)
    }
    if self.minSupportedSecurityVersion != 0 {
      try visitor.visitSingularInt32Field(value: self.minSupportedSecurityVersion, fieldNumber: 3)
    }
    if self.maxSupportedSecurityVersion != 0 {
      try visitor.visitSingularInt32Field(value: self.maxSupportedSecurityVersion, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Google_Companionprotos_VersionExchange, rhs: Com_Google_Companionprotos_VersionExchange) -> Bool {
    if lhs.minSupportedMessagingVersion != rhs.minSupportedMessagingVersion {return false}
    if lhs.maxSupportedMessagingVersion != rhs.maxSupportedMessagingVersion {return false}
    if lhs.minSupportedSecurityVersion != rhs.minSupportedSecurityVersion {return false}
    if lhs.maxSupportedSecurityVersion != rhs.maxSupportedSecurityVersion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
